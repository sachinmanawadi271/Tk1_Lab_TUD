To ensure at-most-once delivery, it is necessary to suppress duplicates.
The server has an algorithm that maintains a table of previously-seen requests. Whenever a message arrives, the algorithm checks the incoming message against the list of previously-seen messages. If this request is new, it is added to the list for serving the request and sends an acknowledgment back to the client. If the request is already in its list, it discards the the request, but it resends the acknowledgment, in case the client did not receive the previous one. If, in addition, the application has already sent a response to the original request, the response is resent.
The main problem with this technique is that the list of requests maintained at the server side may grow indefinitely, taking up space and, taking time to search. Because they may have to be kept indefinitely and hence an appropriate algorithm with optimal size of buffer has to be designed.
	On the client side additional field in the message, monotonically increasing sequence numbers for the requests, and include the highest sequence number for which it has received an acknowledgment. The receiving side can then discard that requests and any others from that sender that are smaller than the received sequence number.

Ref:Principles of Computer System Design An Introduction .Jerome H. Saltzer M. Frans Kaashoek Massachusetts Institute of Technology 

Task 1.2: Marshalling 
a)	Define the Term Marshalling?
Marshalling is the process of transforming memory representation of an object into different formats or packing of procedure parameters into message packets. It is mainly used to make communication between remote objects by converting it into serialized form. 
While networking between a sender and a receiver the need of handing over arguments to the called procedure arises. Since there will be complex representations of data types involved in the transfer we need to flatten these complex data structures .This is done with marshaling and involves the use of some kind of syntax to do the data representation.

b)	 In the lecture CORBA CDR has been presented. In CORBA CDR there is no explicit typing. Explain why this is the case and describe advantages as well as disadvantages. â€¨

In CORBA CDR data is represented using 4 bytes sequences. There is no structural information in CDR because both the sender and the receiver knows what is coming next in the message. There is no need to encode structural information. By defining the interface definition language(IDL) we can provide a way to represent the data in a common way that both sides involved in a connection will understand. 
The use of explicit data typing produces cost in space and time. It need to interpret the type information and also it need to invoke appropriate actions, so there should be a performance cost. The extra type information is in the marshalled form so there should be space cost also. The RMI protocol for CDR is used when the target and the invoker know what type to expect in the messages carrying its arguments and results. It is possible to build type descriptor on top of CDR.
CORBA CDR enables the senders and the receivers to work together even if they are written in different programming languages. 
Referred: http://read.pudn.com/downloads151/ebook/655783/Distributed/Chapter4Answers.pdf







